From cd1c27441ebdbdfaac0d9ebc090ea17f28b75c73 Mon Sep 17 00:00:00 2001
From: Yann Collette <ycollette.nospam@free.fr>
Date: Mon, 5 Oct 2020 12:06:55 +0200
Subject: [PATCH] support fluidsynth 2

---
 src/gst/fluidsynth/fluidsynth.c | 74 ++++++++++++++++++++++++++-------
 src/gst/fluidsynth/fluidsynth.h |  3 +-
 2 files changed, 62 insertions(+), 15 deletions(-)

diff --git a/src/gst/fluidsynth/fluidsynth.c b/src/gst/fluidsynth/fluidsynth.c
index 9330c7a..480a465 100644
--- a/src/gst/fluidsynth/fluidsynth.c
+++ b/src/gst/fluidsynth/fluidsynth.c
@@ -1,4 +1,4 @@
-/* GStreamer
+/* Buzztrax
  * Copyright (C) 2007 Josh Green <josh@users.sf.net>
  *
  * Adapted from simsyn synthesizer plugin in gst-buzztrax source.
@@ -38,7 +38,7 @@
  * gst-launch-1.0 fluidsynth num-buffers=10 note="c-3" ! autoaudiosink
  * ]| Plays one c-3 tone using the first instrument.
  * |[
- * gst-launch-1.0 fluidsynth num-buffers=20 instrument-patch="Vintage_Dreams_Waves_v2.sf2" program=2 note="c-3" ! alsasink
+ * gst-launch-1.0 fluidsynth num-buffers=20 instrument-patch="Vintage_Dreams_Waves_v2.sf2" program=2 note="c-3" ! autoaudiosink
  * ]| Load a specific patch and plays one c-3 tone using the second program.
  * </refsect2>
  */
@@ -132,25 +132,41 @@ G_DEFINE_TYPE (GstBtFluidSynth, gstbt_fluid_synth, GSTBT_TYPE_AUDIO_SYNTH);
 //-- fluid_synth log handler
 
 static void
+#if FLUIDSYNTH_VERSION_MAJOR < 2
 gstbt_fluid_synth_error_log_function (int level, char *message, void *data)
+#else
+gstbt_fluid_synth_error_log_function (int level, const char *message, void *data)
+#endif
 {
   GST_ERROR ("%s", message);
 }
 
 static void
+#if FLUIDSYNTH_VERSION_MAJOR < 2
 gstbt_fluid_synth_warning_log_function (int level, char *message, void *data)
+#else
+gstbt_fluid_synth_warning_log_function (int level, const char *message, void *data)
+#endif
 {
   GST_WARNING ("%s", message);
 }
 
 static void
+#if FLUIDSYNTH_VERSION_MAJOR < 2
 gstbt_fluid_synth_info_log_function (int level, char *message, void *data)
+#else
+gstbt_fluid_synth_info_log_function (int level, const char *message, void *data)
+#endif
 {
   GST_INFO ("%s", message);
 }
 
 static void
+#if FLUIDSYNTH_VERSION_MAJOR < 2
 gstbt_fluid_synth_debug_log_function (int level, char *message, void *data)
+#else
+gstbt_fluid_synth_debug_log_function (int level, const char *message, void *data)
+#endif
 {
   GST_DEBUG ("%s", message);
 }
@@ -177,7 +193,7 @@ interpolation_mode_get_type (void)
   if (!G_UNLIKELY (type))
     type = g_enum_register_static ("GstBtFluidSynthInterpolationMode", values);
 
-  return (type);
+  return type;
 }
 
 #define CHORUS_WAVEFORM_TYPE chorus_waveform_get_type ()
@@ -197,7 +213,7 @@ chorus_waveform_get_type (void)
   if (!G_UNLIKELY (type))
     type = g_enum_register_static ("GstBtFluidSynthChorusWaveform", values);
 
-  return (type);
+  return type;
 }
 
 //-- fluid_synth implementation
@@ -212,7 +228,11 @@ typedef struct
 
 /* for counting the number of FluidSynth settings properties */
 static void
+#if FLUIDSYNTH_VERSION_MAJOR < 2
 settings_foreach_count (void *data, char *name, int type)
+#else
+settings_foreach_count (void *data, const char *name, int type)
+#endif
 {
   int *count = (int *) data;
   *count = *count + 1;
@@ -220,7 +240,11 @@ settings_foreach_count (void *data, char *name, int type)
 
 /* add each FluidSynth setting as a GObject property */
 static void
+#if FLUIDSYNTH_VERSION_MAJOR < 2
 settings_foreach_func (void *data, char *name, int type)
+#else
+settings_foreach_func (void *data, const char *name, int type)
+#endif
 {
   ForeachBag *bag = (ForeachBag *) data;
   GParamSpec *spec;
@@ -231,18 +255,30 @@ settings_foreach_func (void *data, char *name, int type)
   switch (type) {
     case FLUID_NUM_TYPE:
       fluid_settings_getnum_range (bag->settings, name, &dmin, &dmax);
+#if FLUIDSYNTH_VERSION_MAJOR < 2
       ddef = fluid_settings_getnum_default (bag->settings, name);
+#else
+      if (fluid_settings_getnum_default (bag->settings, name, &ddef) != FLUID_OK) ddef = 0;
+#endif
       spec = g_param_spec_double (name, name, name, dmin, dmax, ddef,
           G_PARAM_READWRITE);
       break;
     case FLUID_INT_TYPE:
       fluid_settings_getint_range (bag->settings, name, &imin, &imax);
+#if FLUIDSYNTH_VERSION_MAJOR < 2
       idef = fluid_settings_getint_default (bag->settings, name);
+#else
+      if (fluid_settings_getint_default (bag->settings, name, &idef) != FLUID_OK) idef = 0;
+#endif
       spec = g_param_spec_int (name, name, name, imin, imax, idef,
           G_PARAM_READWRITE);
       break;
     case FLUID_STR_TYPE:
+#if FLUIDSYNTH_VERSION_MAJOR < 2
       defstr = fluid_settings_getstr_default (bag->settings, name);
+#else
+      if (fluid_settings_getstr_default (bag->settings, name,&defstr) != FLUID_OK) defstr = 0;
+#endif
       spec = g_param_spec_string (name, name, name, defstr, G_PARAM_READWRITE);
       break;
     case FLUID_SET_TYPE:
@@ -582,9 +618,9 @@ gstbt_fluid_synth_get_property (GObject * object, guint prop_id,
           g_value_set_double (value, d);
         break;
       case G_TYPE_STRING:
-        retval = fluid_settings_getstr (src->settings, name, &s);
+        retval = fluid_settings_dupstr (src->settings, name, &s);
         if (retval)
-          g_value_set_string (value, s);
+          g_value_take_string (value, s);
         break;
       default:
         g_critical ("Unexpected FluidSynth dynamic property type");
@@ -666,11 +702,14 @@ gstbt_fluid_synth_dispose (GObject * object)
     delete_fluid_midi_driver (gstsynth->midi);
   if (gstsynth->midi_router)
     delete_fluid_midi_router (gstsynth->midi_router);
+  if (gstsynth->cmd_handler)
+    delete_fluid_cmd_handler (gstsynth->cmd_handler);
   if (gstsynth->fluid)
     delete_fluid_synth (gstsynth->fluid);
 
   gstsynth->midi = NULL;
   gstsynth->midi_router = NULL;
+  gstsynth->cmd_handler = NULL;
   gstsynth->fluid = NULL;
 
   g_free (gstsynth->instrument_patch_path);
@@ -714,14 +753,21 @@ gstbt_fluid_synth_init (GstBtFluidSynth * src)
   /* create MIDI router to send MIDI to FluidSynth */
   src->midi_router =
       new_fluid_midi_router (src->settings,
-      fluid_synth_handle_midi_event, (void *) src);
+      fluid_synth_handle_midi_event, src->fluid);
   if (src->midi_router) {
-    fluid_synth_set_midi_router (src->fluid, src->midi_router);
-    src->midi =
-        new_fluid_midi_driver (src->settings,
-        fluid_midi_router_handle_midi_event, (void *) (src->midi_router));
-    if (!src->midi)
-      g_warning ("Failed to create FluidSynth MIDI input driver");
+#if FLUIDSYNTH_VERSION_MAJOR < 2
+    src->cmd_handler = new_fluid_cmd_handler (src->fluid);
+#else
+    src->cmd_handler = new_fluid_cmd_handler (src->fluid,NULL);
+#endif
+    if (src->cmd_handler) {
+      src->midi = new_fluid_midi_driver (src->settings,
+          fluid_midi_router_handle_midi_event, (void *) (src->midi_router));
+      if (!src->midi)
+        g_warning ("Failed to create FluidSynth MIDI input driver");
+    } else {
+      g_warning ("Failed to create FluidSynth MIDI cmd handler");
+    }
   } else
     g_warning ("Failed to create MIDI input router");
 
@@ -874,7 +920,7 @@ gstbt_fluid_synth_class_init (GstBtFluidSynthClass * klass)
       g_param_spec_enum ("chorus-waveform", "Chorus waveform",
           "Chorus waveform type",
           CHORUS_WAVEFORM_TYPE,
-          FLUID_CHORUS_DEFAULT_TYPE,
+          FLUID_CHORUS_MOD_SINE,
           G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
 
   gst_element_class_set_static_metadata (element_class,
diff --git a/src/gst/fluidsynth/fluidsynth.h b/src/gst/fluidsynth/fluidsynth.h
index 952cb76..c079b47 100644
--- a/src/gst/fluidsynth/fluidsynth.h
+++ b/src/gst/fluidsynth/fluidsynth.h
@@ -1,4 +1,4 @@
-/* GStreamer
+/* Buzztrax
  * Copyright (C) 2007 Josh Green <josh@users.sf.net>
  *
  * Adapted from simsyn synthesizer plugin in gst-buzztrax source.
@@ -93,6 +93,7 @@ struct _GstBtFluidSynth {
   fluid_settings_t *settings;       /* to free on close */
   fluid_midi_driver_t *midi;		    /* FluidSynth MIDI driver */
   fluid_midi_router_t *midi_router; /* FluidSynth MIDI router */
+  fluid_cmd_handler_t *cmd_handler;
 
   gchar *instrument_patch_path;
   gint instrument_patch;
-- 
2.28.0

