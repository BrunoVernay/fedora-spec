From 5e1168afc90f62260a2fc9fee43094e0132c7831 Mon Sep 17 00:00:00 2001
From: Yann Collette <ycollette.nospam@free.fr>
Date: Sun, 28 Feb 2016 11:46:38 +0100
Subject: [PATCH 1/2] fix swh compilation

---
 plugins/LadspaEffect/swh/CMakeLists.txt       |   8 +-
 plugins/LadspaEffect/swh/hermes_filter_1200.c |   4 +-
 plugins/LadspaEffect/swh/imp_1199.c           |   4 +-
 plugins/LadspaEffect/swh/impulses/all.h       |   2 +-
 plugins/LadspaEffect/swh/mbeq_1197.c          |  11 ++-
 plugins/LadspaEffect/swh/retro_flange_1208.c  |   2 +-
 plugins/LadspaEffect/swh/vocoder_1337.c       | 111 +++++++++++++-------------
 7 files changed, 72 insertions(+), 70 deletions(-)

diff --git a/plugins/LadspaEffect/swh/CMakeLists.txt b/plugins/LadspaEffect/swh/CMakeLists.txt
index 080f446..e140b17 100644
--- a/plugins/LadspaEffect/swh/CMakeLists.txt
+++ b/plugins/LadspaEffect/swh/CMakeLists.txt
@@ -15,7 +15,7 @@ FOREACH(_item ${PLUGIN_SOURCES})
 	SET_TARGET_PROPERTIES("${_plugin}" PROPERTIES PREFIX "")
 	SET_TARGET_PROPERTIES("${_plugin}" PROPERTIES COMPILE_FLAGS "-O3 -Wall -fomit-frame-pointer -fstrength-reduce -funroll-loops -ffast-math -c -fno-strict-aliasing")
 	IF(LMMS_BUILD_WIN32)
-		ADD_CUSTOM_COMMAND(TARGET "${_plugin}" POST_BUILD COMMAND "${STRIP}" "\"${CMAKE_CURRENT_BINARY_DIR}/${_plugin}.dll\"")
+		ADD_CUSTOM_COMMAND(TARGET "${_plugin}" POST_BUILD COMMAND "${STRIP}" \"$<TARGET_FILE:${_plugin}>\")
 	ELSE(LMMS_BUILD_WIN32)
 		SET_TARGET_PROPERTIES("${_plugin}" PROPERTIES COMPILE_FLAGS "${COMPILE_FLAGS} -fPIC -DPIC")
 	ENDIF(LMMS_BUILD_WIN32)
@@ -24,9 +24,9 @@ FOREACH(_item ${PLUGIN_SOURCES})
 	ELSE(LMMS_BUILD_APPLE)
 		SET_TARGET_PROPERTIES("${_plugin}" PROPERTIES LINK_FLAGS "${LINK_FLAGS} -shared -Wl,-no-undefined -Wl,-Bsymbolic -lm")
 	ENDIF(LMMS_BUILD_APPLE)
-	IF(LMMS_BUILD_LINUX)
-		SET_TARGET_PROPERTIES("${_plugin}" PROPERTIES LINK_FLAGS "${LINK_FLAGS} -nostartfiles")
-	ENDIF(LMMS_BUILD_LINUX)
+	IF(LMMS_BUILD_LINUX OR LMMS_BUILD_HAIKU)
+		SET_TARGET_PROPERTIES("${_plugin}" PROPERTIES LINK_FLAGS "${LINK_FLAGS}")
+	ENDIF(LMMS_BUILD_LINUX OR LMMS_BUILD_HAIKU)
 ENDFOREACH(_item ${PLUGIN_SOURCES})
 
 
diff --git a/plugins/LadspaEffect/swh/hermes_filter_1200.c b/plugins/LadspaEffect/swh/hermes_filter_1200.c
index bf3bbba..a8dd28e 100644
--- a/plugins/LadspaEffect/swh/hermes_filter_1200.c
+++ b/plugins/LadspaEffect/swh/hermes_filter_1200.c
@@ -117,7 +117,7 @@ inline void setup_f_svf(sv_filter *sv, const float fs, const float fc) {
 
 /* Run one sample through the SV filter. Filter is by andy@vellocet */
 
-inline float run_svf(sv_filter *sv, float in) {
+static inline float run_svf(sv_filter *sv, float in) {
         float out;
         int i;
 
@@ -144,7 +144,7 @@ inline float run_svf(sv_filter *sv, float in) {
         return out;
 }
 
-inline int wave_tbl(const float wave) {
+static inline int wave_tbl(const float wave) {
         switch (f_round(wave)) {
                 case 0:
                 return BLO_SINE;
diff --git a/plugins/LadspaEffect/swh/imp_1199.c b/plugins/LadspaEffect/swh/imp_1199.c
index d172a92..90e8e8c 100644
--- a/plugins/LadspaEffect/swh/imp_1199.c
+++ b/plugins/LadspaEffect/swh/imp_1199.c
@@ -63,7 +63,7 @@ typedef rfftw_plan fft_plan;
 
 #define MK_IMP(i) impulse2freq(c, i, IMP_LENGTH(i), impulse_freq[c]); c++
 
-inline void impulse2freq(int id, float *imp, unsigned int length, fftw_real *out);
+static inline void impulse2freq(int id, float *imp, unsigned int length, fftw_real *out);
 
 #include "impulses/all.h"
 
@@ -77,7 +77,7 @@ unsigned int fft_length[IMPULSES];
 #ifdef __clang__
 void impulse2freq(int id, float *imp, unsigned int length, fftw_real *out)
 #else
-inline void impulse2freq(int id, float *imp, unsigned int length, fftw_real *out)
+static inline void impulse2freq(int id, float *imp, unsigned int length, fftw_real *out)
 #endif
 {
   fftw_real impulse_time[MAX_FFT_LENGTH];
diff --git a/plugins/LadspaEffect/swh/impulses/all.h b/plugins/LadspaEffect/swh/impulses/all.h
index 3355f32..b0897fb 100644
--- a/plugins/LadspaEffect/swh/impulses/all.h
+++ b/plugins/LadspaEffect/swh/impulses/all.h
@@ -27,7 +27,7 @@
 #ifdef __clang__
 void mk_imps(fftw_real **impulse_freq)
 #else
-inline void mk_imps(fftw_real **impulse_freq)
+static inline void mk_imps(fftw_real **impulse_freq)
 #endif
 {
 	int c = 0;
diff --git a/plugins/LadspaEffect/swh/mbeq_1197.c b/plugins/LadspaEffect/swh/mbeq_1197.c
index e1c88d3..c10da59 100644
--- a/plugins/LadspaEffect/swh/mbeq_1197.c
+++ b/plugins/LadspaEffect/swh/mbeq_1197.c
@@ -286,11 +286,10 @@ static LADSPA_Handle instantiateMbeq(
 	
 	// Create raised cosine window table
 	for (i=0; i < FFT_LENGTH; i++) {
-	        window[i] = -0.5f*cos(2.0f*M_PI*(double)i/(double)FFT_LENGTH)+0.5f;
-	        window[i] *= 2.0f;
+	        window[i] = -0.5f * cos(2.0f*M_PI*(double)i/(double)FFT_LENGTH) + 0.5f;
 	}
 	
-	// Create db->coeffiecnt lookup table
+	// Create db->coefficient lookup table
 	db_table = malloc(1000 * sizeof(float));
 	for (i=0; i < 1000; i++) {
 	        db = ((float)i/10) - 70;
@@ -472,8 +471,12 @@ static void runMbeq(LADSPA_Handle instance, unsigned long sample_count) {
 	
 	                // Window into the output accumulator
 	                for (i = 0; i < FFT_LENGTH; i++) {
-	                        out_accum[i] += 0.9186162f * window[i] * real[i]/(FFT_LENGTH * OVER_SAMP);
+	                        // correction factor for window measured from white noise
+	                        // reduce intermediate output by (number of coefficients) * OVER_SAMP
+	                        out_accum[i] += real[i] * window[i] * 1.27519f /
+	                                        ((FFT_LENGTH/2) * OVER_SAMP);
 	                }
+	
 	                for (i = 0; i < step_size; i++) {
 	                        out_fifo[i] = out_accum[i];
 	                }
diff --git a/plugins/LadspaEffect/swh/retro_flange_1208.c b/plugins/LadspaEffect/swh/retro_flange_1208.c
index c96dff5..9c7fb4f 100644
--- a/plugins/LadspaEffect/swh/retro_flange_1208.c
+++ b/plugins/LadspaEffect/swh/retro_flange_1208.c
@@ -31,7 +31,7 @@ void __attribute__((constructor)) swh_init(); // forward declaration
 
 #define BASE_BUFFER 0.001 // Base buffer length (s)
 
-inline LADSPA_Data sat(LADSPA_Data x, float q,  float dist) {
+static inline LADSPA_Data sat(LADSPA_Data x, float q,  float dist) {
         if (x == q) {
                 return 1.0f / dist + q / (1.0f - f_exp(dist * q));
         }
diff --git a/plugins/LadspaEffect/swh/vocoder_1337.c b/plugins/LadspaEffect/swh/vocoder_1337.c
index 1ac1048..599d22e 100644
--- a/plugins/LadspaEffect/swh/vocoder_1337.c
+++ b/plugins/LadspaEffect/swh/vocoder_1337.c
@@ -65,24 +65,24 @@ void __attribute__((constructor)) swh_init(); // forward declaration
 
 #define LADSPA_UNIQUE_ID 1337
 
-#define MAX_BANDS  16 /* max 16 bandsn should be increased */
+#define MAX_BANDS  16 /* max 16 bands should be increased */
 #define AMPLIFIER 16.0
 
-struct bandpass
+struct bandpasses
 {
-  LADSPA_Data c, f, att;
+  LADSPA_Data c[MAX_BANDS], f[MAX_BANDS], att[MAX_BANDS];
 
-  LADSPA_Data freq;
-  LADSPA_Data low1, low2;
-  LADSPA_Data mid1, mid2;
-  LADSPA_Data high1, high2;
-  LADSPA_Data y;
+  LADSPA_Data freq[MAX_BANDS];
+  LADSPA_Data low1[MAX_BANDS], low2[MAX_BANDS];
+  LADSPA_Data mid1[MAX_BANDS], mid2[MAX_BANDS];
+  LADSPA_Data high1[MAX_BANDS], high2[MAX_BANDS];
+  LADSPA_Data y[MAX_BANDS];
 };
 
 struct bands_out{
-  LADSPA_Data decay;
-  LADSPA_Data oldval;
-  LADSPA_Data level;		/* 0.0 - 1.0 level of this output band */
+  LADSPA_Data decay[MAX_BANDS];
+  LADSPA_Data oldval[MAX_BANDS];
+  LADSPA_Data level[MAX_BANDS];		/* 0.0 - 1.0 level of this output band */
 };
 
 const LADSPA_Data decay_table[] =
@@ -119,9 +119,9 @@ typedef struct {
   int num_bands;		/* current number of bands */
   float mainvol;		/* main volume */
 
-  struct bandpass bands_formant[MAX_BANDS]; /* one structure per band */
-  struct bandpass bands_carrier[MAX_BANDS]; /* one structure per band */
-  struct bands_out bands_out[MAX_BANDS]; /* one structure per band */
+  struct bandpasses bands_formant; /* all bands in one struct now */
+  struct bandpasses bands_carrier; /* ...same here */ 
+  struct bands_out bands_out;      /* ...and here. */
 
   /* Ports */
 
@@ -165,7 +165,7 @@ activateVocoder(LADSPA_Handle Instance) {
   vocoder->mainvol = 1.0 * AMPLIFIER;
 
   for (i = 0; i < MAX_BANDS; i++)
-    vocoder->bands_out[i].oldval = 0.0;
+    vocoder->bands_out.oldval[i] = 0.0f;
 }
 
 /*****************************************************************************/
@@ -208,21 +208,21 @@ connectPortToVocoder(LADSPA_Handle Instance,
 /*****************************************************************************/
 
 // vocoder_do_bandpasses /*fold00*/
-void vocoder_do_bandpasses(struct bandpass *bands, LADSPA_Data sample,
+void inline vocoder_do_bandpasses(struct bandpasses *bands, LADSPA_Data sample,
 			   VocoderInstance *vocoder)
 {
   int i;
   for (i=0; i < vocoder->num_bands; i++)
     {
-      bands[i].high1 = sample - bands[i].f * bands[i].mid1 - bands[i].low1;
-      bands[i].mid1 += bands[i].high1 * bands[i].c;
-      bands[i].low1 += bands[i].mid1;
-
-      bands[i].high2 = bands[i].low1 - bands[i].f * bands[i].mid2
-	- bands[i].low2;
-      bands[i].mid2 += bands[i].high2 * bands[i].c;
-      bands[i].low2 += bands[i].mid2;
-      bands[i].y = bands[i].high2 * bands[i].att;
+      bands->high1[i] = sample - bands->f[i] * bands->mid1[i] - bands->low1[i];
+      bands->mid1[i] += bands->high1[i] * bands->c[i];
+      bands->low1[i] += bands->mid1[i];
+
+      bands->high2[i] = bands->low1[i] - bands->f[i] * bands->mid2[i]
+	- bands->low2[i];
+      bands->mid2[i] += bands->high2[i] * bands->c[i];
+      bands->low2[i] += bands->mid2[i];
+      bands->y[i]     = bands->high2[i] * bands->att[i];
     }
 }
 
@@ -246,63 +246,62 @@ runVocoder(LADSPA_Handle Instance,
     {
       vocoder->num_bands = numbands;
 
+      memset(&vocoder->bands_formant, 0, sizeof(struct bandpasses));
       for(i=0; i < numbands; i++)
 	{
-	  memset(&vocoder->bands_formant[i], 0, sizeof(struct bandpass));
-
 	  a = 16.0 * i/(double)numbands;  // stretch existing bands
 
 	  if (a < 4.0)
-	    vocoder->bands_formant[i].freq = 150 + 420 * a / 4.0;
+	    vocoder->bands_formant.freq[i] = 150 + 420 * a / 4.0;
 	  else
-	    vocoder->bands_formant[i].freq = 600 * pow (1.23, a - 4.0);
+	    vocoder->bands_formant.freq[i] = 600 * pow (1.23, a - 4.0);
 
-	  c = vocoder->bands_formant[i].freq * 2 * M_PI / vocoder->SampleRate;
-	  vocoder->bands_formant[i].c = c * c;
+	  c = vocoder->bands_formant.freq[i] * 2 * M_PI / vocoder->SampleRate;
+	  vocoder->bands_formant.c[i] = c * c;
 
-	  vocoder->bands_formant[i].f = 0.4/c;
-	  vocoder->bands_formant[i].att =
-	    1/(6.0 + ((exp (vocoder->bands_formant[i].freq
+	  vocoder->bands_formant.f[i] = 0.4/c;
+	  vocoder->bands_formant.att[i] =
+	    1/(6.0 + ((exp (vocoder->bands_formant.freq[i]
 			    / vocoder->SampleRate) - 1) * 10));
 
-	  memcpy(&vocoder->bands_carrier[i],
-		 &vocoder->bands_formant[i], sizeof(struct bandpass));
-
-	  vocoder->bands_out[i].decay = decay_table[(int)a];
-	  vocoder->bands_out[i].level =
+	  vocoder->bands_out.decay[i] = decay_table[(int)a];
+	  vocoder->bands_out.level[i] =
 	    CLAMP (*vocoder->ctrlBandLevels[i], 0.0, 1.0);
 	}
+      memcpy(&vocoder->bands_carrier,
+	     &vocoder->bands_formant, sizeof(struct bandpasses));
+
     }
   else		       /* get current values of band level controls */
     {
       for (i = 0; i < numbands; i++)
-	vocoder->bands_out[i].level = CLAMP (*vocoder->ctrlBandLevels[i],
+	vocoder->bands_out.level[i] = CLAMP (*vocoder->ctrlBandLevels[i],
 					     0.0, 1.0);
     }
 
   for (i=0; i < SampleCount; i++)
     {
-      vocoder_do_bandpasses (vocoder->bands_carrier,
+      vocoder_do_bandpasses (&(vocoder->bands_carrier),
 			     vocoder->portCarrier[i], vocoder);
-      vocoder_do_bandpasses (vocoder->bands_formant,
+      vocoder_do_bandpasses (&(vocoder->bands_formant),
 			     vocoder->portFormant[i], vocoder);
 
-      vocoder->portOutput[i] = 0.0;
-      vocoder->portOutput2[i] = 0.0;
+
+      LADSPA_Data sample = 0.0;
       for (j=0; j < numbands; j++)
 	{
-	  vocoder->bands_out[j].oldval = vocoder->bands_out[j].oldval
-	    + (fabs (vocoder->bands_formant[j].y)
-	       - vocoder->bands_out[j].oldval)
-	    * vocoder->bands_out[j].decay;
-	  x = vocoder->bands_carrier[j].y * vocoder->bands_out[j].oldval;
-	  vocoder->portOutput[i] += x * vocoder->bands_out[j].level;
-	  vocoder->portOutput2[i] += x * vocoder->bands_out[j].level;
+	  vocoder->bands_out.oldval[j] = vocoder->bands_out.oldval[j]
+	    + (fabs (vocoder->bands_formant.y[j])
+	       - vocoder->bands_out.oldval[j])
+	    * vocoder->bands_out.decay[j];
+	  x = vocoder->bands_carrier.y[j] * vocoder->bands_out.oldval[j];
+
+	  sample += x * vocoder->bands_out.level[j];
 	}
 	    /* treat paning + main volume */
-	    pan = (int)(*vocoder->ctrlPan);
-      fl = fr = 1.;
-	    if (pan != 0) { /* no paning, don't compute useless values */
+      pan = (int)(*vocoder->ctrlPan);
+      fl = fr = 1.0f;
+      if (pan != 0) { /* no paning, don't compute useless values */
         if (pan > 0) { /* reduce left */
           fl = (100.-pan)/100.;
         } else {
@@ -310,8 +309,8 @@ runVocoder(LADSPA_Handle Instance,
         }
       }
       /* apply volume and paning */
-      vocoder->portOutput[i] *= vocoder->mainvol * fl;
-      vocoder->portOutput2[i] *= vocoder->mainvol * fr;
+      vocoder->portOutput[i] = sample * vocoder->mainvol * fl;
+      vocoder->portOutput2[i] = sample * vocoder->mainvol * fr;
     }
 }
 
-- 
2.5.0

