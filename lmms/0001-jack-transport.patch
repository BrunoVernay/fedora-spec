From 65237c94b1ef1fbf6dd3117b649d5961821c06e3 Mon Sep 17 00:00:00 2001
From: Yann COLLETTE <ycollette.nospam@free.fr>
Date: Wed, 23 May 2018 19:17:52 +0200
Subject: [PATCH] jack transport

---
 include/AudioJack.h            |  19 ++++--
 include/Engine.h               |   9 ++-
 include/ITransport.h           |  40 ++++++++++++
 include/Song.h                 |  44 ++++++-------
 src/core/Engine.cpp            |   2 +
 src/core/Song.cpp              |  67 +++++++++++++++----
 src/core/audio/AudioJack.cpp   | 142 +++++++++++++++++++++++++++++++++--------
 src/gui/TimeLineWidget.cpp     |   4 +-
 src/gui/editors/SongEditor.cpp |   9 +++
 9 files changed, 265 insertions(+), 71 deletions(-)
 create mode 100644 include/ITransport.h

diff --git a/include/AudioJack.h b/include/AudioJack.h
index 83717f251..4bc675d48 100644
--- a/include/AudioJack.h
+++ b/include/AudioJack.h
@@ -41,13 +41,15 @@
 
 #include "AudioDevice.h"
 #include "AudioDeviceSetupWidget.h"
+#include "ITransport.h"
 
+class QComboBox;
 class QLineEdit;
 class LcdSpinBox;
 class MidiJack;
 
 
-class AudioJack : public QObject, public AudioDevice
+class AudioJack : public QObject, public AudioDevice, virtual public ITransport
 {
 	Q_OBJECT
 public:
@@ -76,9 +78,9 @@ public:
 		virtual void saveSettings();
 
 	private:
-		QLineEdit * m_clientName;
-		LcdSpinBox * m_channels;
-
+		QLineEdit*  m_clientName;
+		LcdSpinBox* m_channels;
+		QComboBox*  m_transports;
 	} ;
 
 
@@ -97,11 +99,18 @@ private:
 	virtual void unregisterPort( AudioPort * _port );
 	virtual void renamePort( AudioPort * _port );
 
+	const QString transportMode();
+	void transportQuery();
+	virtual f_cnt_t transportPosition();
+	virtual void transportStart();
+	virtual void transportStop();
+	virtual void transportLocate(f_cnt_t _frame);
+
 	int processCallback( jack_nframes_t _nframes, void * _udata );
 
 	static int staticProcessCallback( jack_nframes_t _nframes,
 							void * _udata );
-	static void shutdownCallback( void * _udata );
+	static void staticShutdownCallback( void * _udata );
 
 
 	jack_client_t * m_client;
diff --git a/include/Engine.h b/include/Engine.h
index 2f940dfbf..167ac84b2 100644
--- a/include/Engine.h
+++ b/include/Engine.h
@@ -39,7 +39,7 @@ class ProjectJournal;
 class Mixer;
 class Song;
 class Ladspa2LMMS;
-
+class ITransport;
 
 // Note: This class is called 'LmmsCore' instead of 'Engine' because of naming
 // conflicts caused by ZynAddSubFX. See https://github.com/LMMS/lmms/issues/2269
@@ -76,6 +76,11 @@ public:
 		return s_song;
 	}
 
+	static ITransport * transport()
+	{
+		return s_transport;
+	}
+
 	static BBTrackContainer * getBBTrackContainer()
 	{
 		return s_bbTrackContainer;
@@ -132,6 +137,7 @@ private:
 	static Mixer *s_mixer;
 	static FxMixer * s_fxMixer;
 	static Song * s_song;
+	static ITransport * s_transport;
 	static BBTrackContainer * s_bbTrackContainer;
 	static ProjectJournal * s_projectJournal;
 	static DummyTrackContainer * s_dummyTC;
@@ -142,6 +148,7 @@ private:
 	static LmmsCore * s_instanceOfMe;
 
 	friend class GuiApplication;
+	friend class AudioJack;
 };
 
 
diff --git a/include/ITransport.h b/include/ITransport.h
new file mode 100644
index 000000000..a32bb2aa6
--- /dev/null
+++ b/include/ITransport.h
@@ -0,0 +1,40 @@
+/*
+ * AudioJack.h - support for JACK-transport
+ *
+ * Copyright (c) 2017 
+ *
+ * This file is part of LMMS - https://lmms.io
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program (see COPYING); if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ * Boston, MA 02110-1301 USA.
+ *
+ */
+
+#ifndef I_TRANSPORT_H
+#define I_TRANSPORT_H
+
+#include "lmms_basics.h"
+
+/* Interface for transport */
+class ITransport
+{
+ public:
+	virtual f_cnt_t transportPosition() =0;
+	virtual void transportStart() =0;
+	virtual void transportStop() =0;
+	virtual void transportLocate(f_cnt_t _frame) =0;
+};
+
+#endif
diff --git a/include/Song.h b/include/Song.h
index 8b2c21316..4ed0aa9cf 100644
--- a/include/Song.h
+++ b/include/Song.h
@@ -36,6 +36,7 @@
 #include "Mixer.h"
 #include "VstSyncController.h"
 
+#include "ITransport.h"
 
 class AutomationTrack;
 class Pattern;
@@ -48,7 +49,7 @@ const bpm_t MaxTempo = 999;
 const tick_t MaxSongLength = 9999 * DefaultTicksPerTact;
 
 
-class EXPORT Song : public TrackContainer
+class EXPORT Song : public TrackContainer, public virtual ITransport
 {
 	Q_OBJECT
 	mapPropertyFromModel( int,getTempo,setTempo,m_tempoModel );
@@ -87,7 +88,13 @@ public:
 		{
 			return m_currentFrame;
 		}
-		TimeLineWidget * m_timeLine;
+
+                inline float absoluteFrame() const
+                {
+                        return getTicks()*Engine::framesPerTick()+m_currentFrame;
+                }
+
+                TimeLineWidget * m_timeLine;
 
 	private:
 		float m_currentFrame;
@@ -105,36 +112,22 @@ public:
 
 	inline int getMilliseconds() const
 	{
-		return m_elapsedMilliSeconds[m_playMode];
-	}
-
-	inline int getMilliseconds(PlayModes playMode) const
-	{
-		return m_elapsedMilliSeconds[playMode];
+		return m_elapsedMilliSeconds;
 	}
 
-	inline void setToTime(MidiTime const & midiTime)
+	inline void setToTime( int millis )
 	{
-		m_elapsedMilliSeconds[m_playMode] = midiTime.getTimeInMilliseconds(getTempo());
-		m_playPos[m_playMode].setTicks(midiTime.getTicks());
+		m_elapsedMilliSeconds = millis;
 	}
 
-	inline void setToTime(MidiTime const & midiTime, PlayModes playMode)
+	inline void setToTime( MidiTime const & midiTime )
 	{
-		m_elapsedMilliSeconds[playMode] = midiTime.getTimeInMilliseconds(getTempo());
-		m_playPos[playMode].setTicks(midiTime.getTicks());
+		m_elapsedMilliSeconds = midiTime.getTimeInMilliseconds(getTempo());
 	}
 
 	inline void setToTimeByTicks(tick_t ticks)
 	{
-		m_elapsedMilliSeconds[m_playMode] = MidiTime::ticksToMilliseconds(ticks, getTempo());
-		m_playPos[m_playMode].setTicks(ticks);
-	}
-
-	inline void setToTimeByTicks(tick_t ticks, PlayModes playMode)
-	{
-		m_elapsedMilliSeconds[playMode] = MidiTime::ticksToMilliseconds(ticks, getTempo());
-		m_playPos[playMode].setTicks(ticks);
+		m_elapsedMilliSeconds = MidiTime::ticksToMilliseconds(ticks, getTempo());
 	}
 
 	inline int getTacts() const
@@ -302,6 +295,11 @@ public:
 
 	inline void setLoadOnLauch(bool value) { m_loadOnLaunch = value; }
 
+	virtual f_cnt_t transportPosition();
+	virtual void transportStart();
+	virtual void transportStop();
+	virtual void transportLocate(f_cnt_t _frame);
+
 public slots:
 	void playSong();
 	void record();
@@ -410,7 +408,7 @@ private:
 	const Pattern* m_patternToPlay;
 	bool m_loopPattern;
 
-	double m_elapsedMilliSeconds[Mode_Count];
+	double m_elapsedMilliSeconds;
 	tick_t m_elapsedTicks;
 	tact_t m_elapsedTacts;
 
diff --git a/src/core/Engine.cpp b/src/core/Engine.cpp
index a53abbe5d..0c1a56dd8 100644
--- a/src/core/Engine.cpp
+++ b/src/core/Engine.cpp
@@ -39,6 +39,7 @@ Mixer* LmmsCore::s_mixer = NULL;
 FxMixer * LmmsCore::s_fxMixer = NULL;
 BBTrackContainer * LmmsCore::s_bbTrackContainer = NULL;
 Song * LmmsCore::s_song = NULL;
+ITransport * LmmsCore::s_transport = NULL;
 ProjectJournal * LmmsCore::s_projectJournal = NULL;
 Ladspa2LMMS * LmmsCore::s_ladspaManager = NULL;
 DummyTrackContainer * LmmsCore::s_dummyTC = NULL;
@@ -81,6 +82,7 @@ void LmmsCore::init( bool renderOnly )
 void LmmsCore::destroy()
 {
 	s_projectJournal->stopAllJournalling();
+	transport()->transportStop();
 	s_mixer->stopProcessing();
 
 	PresetPreviewPlayHandle::cleanup();
diff --git a/src/core/Song.cpp b/src/core/Song.cpp
index 775c0c588..1cf7ba3f7 100644
--- a/src/core/Song.cpp
+++ b/src/core/Song.cpp
@@ -85,10 +85,10 @@ Song::Song() :
 	m_length( 0 ),
 	m_patternToPlay( NULL ),
 	m_loopPattern( false ),
+	m_elapsedMilliSeconds( 0 ),
 	m_elapsedTicks( 0 ),
 	m_elapsedTacts( 0 )
 {
-	for(int i = 0; i < Mode_Count; ++i) m_elapsedMilliSeconds[i] = 0;
 	connect( &m_tempoModel, SIGNAL( dataChanged() ),
 						this, SLOT( setTempo() ) );
 	connect( &m_tempoModel, SIGNAL( dataUnchanged() ),
@@ -382,7 +382,7 @@ void Song::processNextBuffer()
 		framesPlayed += framesToPlay;
 		m_playPos[m_playMode].setCurrentFrame( framesToPlay +
 								currentFrame );
-		m_elapsedMilliSeconds[m_playMode] += MidiTime::ticksToMilliseconds(framesToPlay / framesPerTick, getTempo());
+		m_elapsedMilliSeconds += MidiTime::ticksToMilliseconds(framesToPlay / framesPerTick, getTempo());
 		m_elapsedTacts = m_playPos[Mode_PlaySong].getTact();
 		m_elapsedTicks = ( m_playPos[Mode_PlaySong].getTicks() % ticksPerTact() ) / 48;
 	}
@@ -422,7 +422,8 @@ void Song::processAutomations(const TrackList &tracklist, MidiTime timeStart, fp
 	Track::tcoVector tcos;
 	for (Track* track : tracks)
 	{
-		if (track->type() == Track::AutomationTrack) {
+		if ((track->type() == Track::AutomationTrack) && !track->isMuted())
+		{
 			track->getTCOsInRange(tcos, 0, timeStart);
 		}
 	}
@@ -430,7 +431,9 @@ void Song::processAutomations(const TrackList &tracklist, MidiTime timeStart, fp
 	// Process recording
 	for (TrackContentObject* tco : tcos)
 	{
-		auto p = dynamic_cast<AutomationPattern *>(tco);
+		auto p = dynamic_cast<AutomationPattern*>(tco);
+		if(!p) continue;
+
 		MidiTime relTime = timeStart - p->startPosition();
 		if (p->isRecording() && relTime >= 0 && relTime < p->length())
 		{
@@ -654,33 +657,39 @@ void Song::stop()
 		switch( tl->behaviourAtStop() )
 		{
 			case TimeLineWidget::BackToZero:
-				m_playPos[m_playMode].setTicks(0);
-				m_elapsedMilliSeconds[m_playMode] = 0;
+				Engine::transport()->transportLocate(0);
+				if ( gui && gui->songEditor() &&
+				     ( tl->autoScroll() == TimeLineWidget::AutoScrollEnabled ) )
+				{
+					gui->songEditor()->m_editor->updatePosition(0);
+				}
 				break;
 
 			case TimeLineWidget::BackToStart:
 				if( tl->savedPos() >= 0 )
 				{
-					m_playPos[m_playMode].setTicks(tl->savedPos().getTicks());
-					setToTime(tl->savedPos());
-
+					Engine::transport()->transportLocate(tl->savedPos().frames(Engine::framesPerTick()));
+					if( gui && gui->songEditor() &&
+					    ( tl->autoScroll() == TimeLineWidget::AutoScrollEnabled ) )
+					{
+						gui->songEditor()->m_editor->updatePosition( MidiTime(tl->savedPos().getTicks() ) );
+					}
 					tl->savePos( -1 );
 				}
 				break;
 
 			case TimeLineWidget::KeepStopPosition:
+			default:
 				break;
 		}
 	}
 	else
 	{
 		m_playPos[m_playMode].setTicks( 0 );
-		m_elapsedMilliSeconds[m_playMode] = 0;
+		m_elapsedMilliSeconds = 0;
 	}
 	m_playing = false;
 
-	m_elapsedMilliSeconds[Mode_None] = m_elapsedMilliSeconds[m_playMode];
-	m_playPos[Mode_None].setTicks(m_playPos[m_playMode].getTicks());
 
 	m_playPos[m_playMode].setCurrentFrame( 0 );
 
@@ -1363,3 +1372,37 @@ QString Song::errorSummary()
 
 	return errors;
 }
+
+f_cnt_t Song::transportPosition()
+{
+	return currentFrame();
+}
+
+void Song::transportStart()
+{
+	if (!isPlaying())
+	{
+		if(isPaused()) togglePause();
+		else playSong();
+	}
+}
+
+void Song::transportStop()
+{
+	if (isPlaying())
+	{
+		togglePause();
+	}
+}
+
+void Song::transportLocate(f_cnt_t _frame)
+{
+	if (currentFrame()!=_frame)
+	{
+		tick_t t=_frame/Engine::framesPerTick();
+		PlayPos& p=getPlayPos(playMode());
+		p.setTicks(t);
+		p.setCurrentFrame(_frame-t*Engine::framesPerTick());
+		setToTime(p);
+	}
+}
diff --git a/src/core/audio/AudioJack.cpp b/src/core/audio/AudioJack.cpp
index 4d730eed4..39b1f89e6 100644
--- a/src/core/audio/AudioJack.cpp
+++ b/src/core/audio/AudioJack.cpp
@@ -26,11 +26,13 @@
 
 #ifdef LMMS_HAVE_JACK
 
+#include <QComboBox>
 #include <QLineEdit>
 #include <QLabel>
 #include <QMessageBox>
 
 #include "Engine.h"
+#include "Song.h"
 #include "GuiApplication.h"
 #include "templates.h"
 #include "gui_templates.h"
@@ -71,7 +73,6 @@ AudioJack::AudioJack( bool & _success_ful, Mixer*  _mixer ) :
 
 AudioJack::~AudioJack()
 {
-	stopProcessing();
 #ifdef AUDIO_PORT_SUPPORT
 	while( m_portMap.size() )
 	{
@@ -83,6 +84,7 @@ AudioJack::~AudioJack()
 	{
 		if( m_active )
 		{
+			stopProcessing();
 			jack_deactivate( m_client );
 		}
 		jack_client_close( m_client );
@@ -136,7 +138,7 @@ AudioJack* AudioJack::addMidiClient(MidiJack *midiClient)
 bool AudioJack::initJackClient()
 {
 	QString clientName = ConfigManager::inst()->value( "audiojack",
-								"clientname" );
+							   "clientname" );
 	if( clientName.isEmpty() )
 	{
 		clientName = "lmms";
@@ -145,8 +147,8 @@ bool AudioJack::initJackClient()
 	const char * serverName = NULL;
 	jack_status_t status;
 	m_client = jack_client_open( clientName.toLatin1().constData(),
-						JackNullOption, &status,
-								serverName );
+				     JackNullOption, &status,
+				     serverName );
 	if( m_client == NULL )
 	{
 		printf( "jack_client_open() failed, status 0x%2.0x\n", status );
@@ -159,18 +161,16 @@ bool AudioJack::initJackClient()
 	if( status & JackNameNotUnique )
 	{
 		printf( "there's already a client with name '%s', so unique "
-			"name '%s' was assigned\n", clientName.
-							toLatin1().constData(),
-					jack_get_client_name( m_client ) );
+			"name '%s' was assigned\n",
+			clientName.toLatin1().constData(),
+			jack_get_client_name( m_client ) );
 	}
 
 	// set process-callback
 	jack_set_process_callback( m_client, staticProcessCallback, this );
 
 	// set shutdown-callback
-	jack_on_shutdown( m_client, shutdownCallback, this );
-
-
+	jack_on_shutdown( m_client, staticShutdownCallback, this );
 
 	if( jack_get_sample_rate( m_client ) != sampleRate() )
 	{
@@ -193,6 +193,10 @@ bool AudioJack::initJackClient()
 		}
 	}
 
+	QString mode=transportMode();
+	if((mode=="client")||(mode=="master"))
+		Engine::s_transport=this;
+
 	return true;
 }
 
@@ -211,7 +215,7 @@ void AudioJack::startProcessing()
 
 	if( jack_activate( m_client ) )
 	{
-		printf( "cannot activate client\n" );
+		qCritical( "Jack: cannot activate client" );
 		return;
 	}
 
@@ -247,6 +251,8 @@ void AudioJack::startProcessing()
 	}
 
 	free( ports );
+
+	transportQuery();
 }
 
 
@@ -337,11 +343,72 @@ void AudioJack::renamePort( AudioPort * _port )
 #endif
 }
 
+const QString AudioJack::transportMode()
+{
+	QString r=ConfigManager::inst()->value( "audiojack","transport" );
+	if(r.isEmpty() || ( (r!="independent") && (r!="slave") && (r!="client") && (r!="master") ) )
+	{
+		r="independent";
+		ConfigManager::inst()->setValue( "audiojack", "transport", r);
+	}
+	return r;
+}
+
+f_cnt_t AudioJack::transportPosition()
+{
+	jack_position_t pos;
+	/*jack_transport_state_t ts=*/jack_transport_query(m_client, &pos);
+	return pos.frame;
+}
+
+void AudioJack::transportStart()
+{
+	jack_transport_start(m_client);
+}
+
+void AudioJack::transportStop()
+{
+	jack_transport_stop(m_client);
+}
+
+void AudioJack::transportLocate(f_cnt_t _frame)
+{
+	qWarning("AudioJack::transportLocate %d",_frame);
+	jack_transport_locate(m_client, _frame);
+}
+
+void AudioJack::transportQuery()
+{
+	const QString& mode=transportMode();
+	ITransport* song=Engine::getSong();
+
+	if((mode=="client")||(mode=="master"))
+		Engine::s_transport=this;
+	else
+		Engine::s_transport=song;
+
+	if(mode=="independent") return;
+
+	jack_position_t pos;
+	jack_transport_state_t ts=jack_transport_query(m_client, &pos);
+
+	if(ts==JackTransportRolling) song->transportStart();
+	if(ts==JackTransportStopped) song->transportStop();
+
+	if(song->transportPosition()!=pos.frame)
+	{
+		qWarning("AudioJack: lmms=%d jack=%d",song->transportPosition(),pos.frame);
+		song->transportLocate(pos.frame);
+	}
+}
+
 
 
 
 int AudioJack::processCallback( jack_nframes_t _nframes, void * _udata )
 {
+	if( !m_active ) return 0;
+
 	QMutexLocker m( &m_processingMutex );
 
 	// do midi processing first so that midi input can
@@ -355,8 +422,8 @@ int AudioJack::processCallback( jack_nframes_t _nframes, void * _udata )
 	for( int c = 0; c < channels(); ++c )
 	{
 		m_tempOutBufs[c] =
-			(jack_default_audio_sample_t *) jack_port_get_buffer(
-												m_outputPorts[c], _nframes );
+			(jack_default_audio_sample_t *) jack_port_get_buffer
+			( m_outputPorts[c], _nframes );
 	}
 
 #ifdef AUDIO_PORT_SUPPORT
@@ -403,15 +470,15 @@ int AudioJack::processCallback( jack_nframes_t _nframes, void * _udata )
 		if( m_framesDoneInCurBuf == m_framesToDoInCurBuf )
 		{
 			m_framesToDoInCurBuf = getNextBuffer( m_outBuf );
-			m_framesDoneInCurBuf = 0;
 			if( !m_framesToDoInCurBuf )
 			{
-				break;
+				m_stopped = true;
 			}
+			m_framesDoneInCurBuf = 0;
 		}
 	}
 
-	if( _nframes != done )
+	if( m_stopped == true )
 	{
 		for( int c = 0; c < channels(); ++c )
 		{
@@ -420,6 +487,8 @@ int AudioJack::processCallback( jack_nframes_t _nframes, void * _udata )
 		}
 	}
 
+	transportQuery();
+
 	return 0;
 }
 
@@ -428,18 +497,18 @@ int AudioJack::processCallback( jack_nframes_t _nframes, void * _udata )
 
 int AudioJack::staticProcessCallback( jack_nframes_t _nframes, void * _udata )
 {
-	return static_cast<AudioJack *>( _udata )->
-					processCallback( _nframes, _udata );
+	AudioJack* aj = static_cast<AudioJack *>( _udata );
+	return aj->processCallback( _nframes, _udata );
 }
 
 
 
 
-void AudioJack::shutdownCallback( void * _udata )
+void AudioJack::staticShutdownCallback( void * _udata )
 {
-	AudioJack * _this = static_cast<AudioJack *>( _udata );
-	_this->m_client = NULL;
-	_this->zombified();
+	AudioJack* aj = static_cast<AudioJack *>( _udata );
+	aj->m_client = NULL;
+	aj->zombified();
 }
 
 
@@ -449,6 +518,11 @@ void AudioJack::shutdownCallback( void * _udata )
 AudioJack::setupWidget::setupWidget( QWidget * _parent ) :
 	AudioDeviceSetupWidget( AudioJack::name(), _parent )
 {
+
+	QLabel * cn_lbl = new QLabel( tr( "CLIENT-NAME" ), this );
+	//cn_lbl->setFont( pointSize<6>( cn_lbl->font() ) );
+	cn_lbl->setGeometry( 10, 40, 160, 10 );
+
 	QString cn = ConfigManager::inst()->value( "audiojack", "clientname" );
 	if( cn.isEmpty() )
 	{
@@ -457,10 +531,6 @@ AudioJack::setupWidget::setupWidget( QWidget * _parent ) :
 	m_clientName = new QLineEdit( cn, this );
 	m_clientName->setGeometry( 10, 20, 160, 20 );
 
-	QLabel * cn_lbl = new QLabel( tr( "CLIENT-NAME" ), this );
-	cn_lbl->setFont( pointSize<7>( cn_lbl->font() ) );
-	cn_lbl->setGeometry( 10, 40, 160, 10 );
-
 	LcdSpinBoxModel * m = new LcdSpinBoxModel( /* this */ );
 	m->setRange( DEFAULT_CHANNELS, SURROUND_CHANNELS );
 	m->setStep( 2 );
@@ -472,6 +542,20 @@ AudioJack::setupWidget::setupWidget( QWidget * _parent ) :
 	m_channels->setLabel( tr( "CHANNELS" ) );
 	m_channels->move( 180, 20 );
 
+	QLabel * mode_lbl = new QLabel( tr( "TRANSPORT" ), this );
+	//mode_lbl->setFont( pointSize<6>( mode_lbl->font() ) );
+	mode_lbl->setGeometry( 240, 40, 100, 10 );
+
+	QString mode = ConfigManager::inst()->value( "audiojack", "transport" );
+	if( mode.isEmpty() ) mode="none";
+	QStringList modes;
+	modes << "none" << "slave" << "client" << "master";
+	m_transports=new QComboBox( this );
+	m_transports->addItems(modes);
+	int i=m_transports->findText(mode);
+	if(i<0) i=0;
+	m_transports->setCurrentIndex(i);
+	m_transports->setGeometry( 240, 20, 100, 20 );
 }
 
 
@@ -488,9 +572,11 @@ AudioJack::setupWidget::~setupWidget()
 void AudioJack::setupWidget::saveSettings()
 {
 	ConfigManager::inst()->setValue( "audiojack", "clientname",
-							m_clientName->text() );
+					 m_clientName->text() );
 	ConfigManager::inst()->setValue( "audiojack", "channels",
-				QString::number( m_channels->value<int>() ) );
+					 QString::number( m_channels->value<int>() ) );
+	ConfigManager::inst()->setValue( "audiojack", "transport",
+					 m_transports->currentText() );
 }
 
 
diff --git a/src/gui/TimeLineWidget.cpp b/src/gui/TimeLineWidget.cpp
index 86dd43b51..935cefbf3 100644
--- a/src/gui/TimeLineWidget.cpp
+++ b/src/gui/TimeLineWidget.cpp
@@ -372,11 +372,11 @@ void TimeLineWidget::mouseMoveEvent( QMouseEvent* event )
 	{
 		case MovePositionMarker:
 			m_pos.setTicks(t.getTicks());
-			Engine::getSong()->setToTime(t, m_mode);
+			Engine::getSong()->setToTime(t);
 			if (!( Engine::getSong()->isPlaying()))
 			{
 				//Song::Mode_None is used when nothing is being played.
-				Engine::getSong()->setToTime(t, Song::Mode_None);
+				Engine::getSong()->setToTime(t);
 			}
 			m_pos.setCurrentFrame( 0 );
 			updatePosition();
diff --git a/src/gui/editors/SongEditor.cpp b/src/gui/editors/SongEditor.cpp
index 52e91a260..c7f7bca0b 100644
--- a/src/gui/editors/SongEditor.cpp
+++ b/src/gui/editors/SongEditor.cpp
@@ -764,6 +764,13 @@ void SongEditorWindow::resizeEvent(QResizeEvent *event)
 void SongEditorWindow::play()
 {
 	emit playTriggered();
+
+	if( Engine::getSong()->isPlaying() )
+		Engine::transport()->transportStop();
+	else
+		Engine::transport()->transportStart();
+
+	/*
 	if( Engine::getSong()->playMode() != Song::Mode_PlaySong )
 	{
 		Engine::getSong()->playSong();
@@ -772,6 +779,7 @@ void SongEditorWindow::play()
 	{
 		Engine::getSong()->togglePause();
 	}
+	*/
 }
 
 
@@ -793,6 +801,7 @@ void SongEditorWindow::recordAccompany()
 
 void SongEditorWindow::stop()
 {
+	Engine::transport()->transportStop();
 	m_editor->m_song->stop();
 	gui->pianoRoll()->stopRecording();
 }
-- 
2.14.3

